#@ load("@ytt:data", "data")
#@ for rolebinding in data.values.rolebindings:
#@   if hasattr(rolebinding, "tap") and hasattr(rolebinding.tap, "enabled") and rolebinding.tap.enabled :
#@     namespace = rolebinding.namespace.lower()
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: #@ data.values.tap_registry.name
  namespace: #@ namespace
  labels:
    rbac-mgmt: "managed"
spec:
  fromNamespace: #@ data.values.tap_registry.import_from_namespace
---
apiVersion: secretgen.carvel.dev/v1alpha1
kind: SecretImport
metadata:
  name: #@ data.values.registry_credentials.name
  namespace: #@ namespace
  labels:
    rbac-mgmt: "managed"
spec:
  fromNamespace: #@ data.values.registry_credentials.import_from_namespace
---
apiVersion: v1
kind: Secret
metadata:
  name: git-ssh
  namespace: #@ namespace
  annotations:
    tekton.dev/git-0: github.com
  labels:
    rbac-mgmt: "managed"
type: kubernetes.io/ssh-auth
data:
  ssh-privatekey: 8J+UkQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: git-basic
  namespace: #@ namespace
  annotations:
    tekton.dev/git-0: https://github.com
  labels:
    rbac-mgmt: "managed"
type: kubernetes.io/basic-auth
data:
  username: Q0hBTkdFTUU=
  password: Q0hBTkdFTUU=
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ rolebinding.tap.service_account
  namespace: #@ namespace
  labels:
    rbac-mgmt: "managed"
secrets:
- name: registry-credentials
- name: git-ssh
- name: git-basic
imagePullSecrets:
- name: registry-credentials
- name: tap-registry
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: #@ "{}-permit-deliverable".format(rolebinding.tap.service_account)
  namespace: #@ namespace
  labels:
    rbac-mgmt: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: deliverable
subjects:
- kind: ServiceAccount
  name: #@ rolebinding.tap.service_account
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: #@ "{}-permit-workload".format(rolebinding.tap.service_account)
  namespace: #@ namespace
  labels:
    rbac-mgmt: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: workload
subjects:
- kind: ServiceAccount
  name: #@ rolebinding.tap.service_account
#@     if hasattr(rolebinding.tap, "grype") and hasattr(rolebinding.tap.grype, "enabled") and rolebinding.tap.grype.enabled :
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  annotations:
    tkg.tanzu.vmware.com/tanzu-package-ClusterRole: #@ "grype-{}-tap-install-cluster-role".format(namespace)
    tkg.tanzu.vmware.com/tanzu-package-ClusterRoleBinding: #@ "grype-{}-tap-install-cluster-rolebinding".format(namespace)
    tkg.tanzu.vmware.com/tanzu-package-Secret: #@ "grype-{}-tap-install-values".format(namespace)
    tkg.tanzu.vmware.com/tanzu-package-ServiceAccount: #@ "grype-{}-tap-install-sa".format(namespace)
    kapp.k14s.io/change-rule.create-order.0: #@ "upsert after upserting grype-{}-tap-install-rbac".format(namespace)
    kapp.k14s.io/change-rule.delete-order.0: #@ "delete before deleting grype-{}-tap-install-rbac".format(namespace)
    kapp.k14s.io/change-rule.create-order.1: #@ "upsert after upserting grype-{}-tap-install-values".format(namespace)
    kapp.k14s.io/change-rule.delete-order.1: #@ "delete before deleting grype-{}-tap-install-values".format(namespace)
  name: #@ "grype-{}".format(namespace)
  namespace: tap-install
  labels:
    rbac-mgmt: "managed"
spec:
  packageRef:
    refName: grype.scanning.apps.tanzu.vmware.com
    versionSelection:
      constraints: rolebinding.tap.grype.version
  serviceAccountName: #@ "grype-{}-tap-install-sa".format(namespace)
  values:
  - secretRef:
      name: #@ "grype-{}-tap-install-values".format(namespace)
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    tkg.tanzu.vmware.com/tanzu-package: #@ "grype-{}".format(namespace)
    kapp.k14s.io/change-group: #@ "grype-{}-tap-install-rbac".format(namespace)
  name: #@ "grype-{}-tap-install-cluster-role".format(namespace)
  labels:
    rbac-mgmt: "managed"
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    tkg.tanzu.vmware.com/tanzu-package: #@ "grype-{}".format(namespace)
    kapp.k14s.io/change-group: #@ "grype-{}-tap-install-rbac".format(namespace)
  name: #@ "grype-{}-tap-install-cluster-rolebinding".format(namespace)
  labels:
    rbac-mgmt: "managed"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "grype-{}-tap-install-cluster-role".format(namespace)
subjects:
- kind: ServiceAccount
  name: #@ "grype-{}-tap-install-sa".format(namespace)
  namespace: tap-install
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    tkg.tanzu.vmware.com/tanzu-package: #@ "grype-{}".format(namespace)
    kapp.k14s.io/change-group: #@ "grype-{}-tap-install-rbac".format(namespace)
  labels:
    rbac-mgmt: "managed"
  name: #@ "grype-{}-tap-install-sa".format(namespace)
  namespace: tap-install
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    tkg.tanzu.vmware.com/tanzu-package: #@ "grype-{}".format(namespace)
    kapp.k14s.io/change-group: #@ "grype-{}-tap-install-values".format(namespace)
  name: #@ "grype-{}-tap-install-values".format(namespace)
  namespace: tap-install
  labels:
    rbac-mgmt: "managed"
type: Opaque
stringData:
  #@yaml/text-templated-strings
  values.yml: |
    namespace: (@= namespace @)
    targetImagePullSecret: registry-credentials
#@     end
#@   end
#@ end